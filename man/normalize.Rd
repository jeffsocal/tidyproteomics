% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/control_normalization.R
\name{normalize}
\alias{normalize}
\title{Main function for normalizing quantitative data in a tidyproteomics data-object}
\usage{
normalize(
  data,
  ...,
  .method = c("scaled", "median", "linear", "limma", "loess", "svm", "randomforest")
)
}
\arguments{
\item{data}{tidyproteomics data object}

\item{...}{use a subset of the data for normalization see \code{subset()}. This is useful when normalizing against a spike-in set of
proteins}

\item{method}{character vector (scaled, median, linear, limma, loess, randomforest)}
}
\value{
a tidyproteomics data-object
}
\description{
\code{normalize()} Main function for normalizing quantitative data from a tidyproteomics
data-object. This is a \emph{passthrough} function as it returns the original
tidyproteomics data-object with an additional quantitative column labeled with the
normalization method(s) used.

This function can accommodate multiple normalization methods in a single pass,
and it is useful for examining normalization effects on data. Often it is
adventitious to select a optimal normalization method based on performance.
}
\examples{
library(dplyr, warn.conflicts = FALSE)
library(tidyproteomics)
ecoli_proteins \%>\%
     normalize(.method = c('scaled', 'median')) \%>\%
     summary('sample')

# normalize between samples according to a subset, then apply to all values
#   this would be recommended with a pull-down experiment wherein a conserved
#   protein complex acts as the majority content and individual inter-actors
#   are of quantitative differentiation
ecoli_proteins \%>\%
     normalize(description \%!like\% 'Ribosome', .method = c('scaled', 'median')) \%>\%
     summary('sample')

}
